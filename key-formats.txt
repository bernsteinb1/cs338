Bryce Bernstein

PRIVATE KEY

-----BEGIN RSA PRIVATE KEY-----
MIIG4gIBAAKCAYEAnyhokhqq2ZC58eOq6K/1iv43ZbW25D6ImkYW/PvKEo+svp1C
j7aZ1lO+0WSDnkSmR5Lmaenos+4FSGCwga5J9C+Z1SDqqoC+3f+YbA2qCkjlRT8A
msQo5CpVG8NluKrQrbHJGQdJdvmSz9Ph106ty80F3Zd2chAFXhPzE9LMKctgTORL
+iofHekDglsLZ3xsfs9YN5F1k2Jv5PsqMZ7DCbtal+KkO20b5uedRjqK1SH41mDO
6b5rqy4JiQkWbSxMWPAfRaWB+HowfzlhBZajSKbCuOyWks/O5+aBB1kLfdzfMpOJ
JciFxW+g2wfIML+IHHq4nbjcvs0MqKHRuC39Ev+zli8NDESyZsrgZKOkayKCS2cR
D1cE1+3bThEiuhwzjG1Pb9JjBidCwT0ADeme5naDjZJ77SBX2BOeStD0WwuGfaBd
A+uREbj5Ht2XjU3qOLNj3nxcgC8MmJUJ6sWQkPkbI1lOhmeKXyFqsYhkIzhIuCPe
qPMcjZXJeE+J+f5/AgMBAAECggGABVNj1GfCCc+2+SomIO0qaUFCd0vSV+bjyU3J
HSQLyf02yZYXkRmKIkrhGr6jTNt9OO3oeejS2ZqAYMCjh2NepCYnnqMgVx5BxMn1
vr/iTb/MtDl8erFPsPrdqDUspTZKD1Xgpc7BnZKSYBP1/a9rT2OH67dSxlRU6aX/
P02ReWCN02TcSf241tZiQK1tP0RBmSi1Cf77ETh9CAuDiO+IFT5ItMZnunlXMq3T
bHMvDBy75+iLY/T0Q2Eh/ozoTDTsN5dCdBETKKhYYljJDxfsrs/1iNczL+AghILw
a/A3BN2vZW1uxl2u7A3KOFs5GNBDRUQRtCfkjpadm1mbjIhX7D2KImgtyK47GCG3
xIRqWEjOuiD3NXvA4DDPA6jAwBZEF7jC8V/O2PWejKz/OefUpob0WVsyzsUbR64x
0yxkJ6fDoSbTywodpVcqQaa5i0Vwb7NHSqC7JyAf1XqP1cv4Lt1mGIyloGCfF9DC
n8v89eM28m0s8BefMYeT1G3yyrghAoHBAMtowBAryTefWwJ/iabtzOPYizb27Efa
NEpUsFlS+MSAygJ8CW8jWCjQj5aUB3C6zHs7XY50WtGyd+2M+WZCoU41VJo7/Hcf
91gyURYgAq/uBMh/HrMsjnfv1HebckGEtVoZCrOXCSGATdf2bMj0oFdumk73xLse
gbjGPWD8nyu+lxNnNHXl+pessZGlyrwK1P9bNg/wsmIrIZ+qcrA+SrmOtoebcyia
EG5yn5k3aqTLXUetVXcekbyNgnG4jZPZcQKBwQDITsAPl3Z6o2FBSbpvAR2EIeAY
shKHRla3yBrSIyUopIttZc3zD319QNSMTyl1CFeGtX7BGiqNXGWS5keNWZ603E3y
dRXaIdauT7qWhLLPRAPDnPagddTR9mo9zCRoXRq9YK57PU9MJEVOp5fzPF8OjTys
gT+Lq3JWsi29j8Vcmmn/H7d0O+gFc6MX5sNcwyznqccXRNT5y4og6QlaiWBcE1Av
juir3pTa3tY8jKePcsaXydeb/mqyW5WWbuuC3u8CgcA2JQMDCvS75qJOLu7QTXp9
p/WewumwUqgapSJwFIL9o56iPKwyNkFQU/v0xCCa5E5r+yhzNAu8x/nedOkqTFAt
xkpn59HTT+ICSxqEfi7Y7828JQJiBVlDGcb/s5QdVpsDiajslyaqEUInW4Qnld5c
h6dxn8hxWrSDH9nUyEoCVfBXDODNBVPILgLyVyR5G5UJCBmC8ro5IWwI2VFAEsTH
UfLKdBmaVDBNhhtvqG2twihpXP1kAPIgM7bmWI7vLTECgcBteKR8oPGOesYHMW0j
h3+DHCRmOsPnjGiOTl1iJPUE7lCI/E9/HCMgFhNTj1v/6wwywfRBQrSoxyt4CkRm
mukivRgYfybvLPkwEMDPzDwRDIHmIV2kOmGSUlKj7XKkWuXnQ/R3w/0Xhucd4ngn
5gGpaUUUnhqFkbCOcxiOdgmN35I4bTQM4USf3h/vSx3QD5b2ERKOw/6FeljGPbXv
9g5ko+V56Gd+rsm5iHmbY9+bhUXF5Pjh9zyGt4jcS0iJIJ8CgcBNVvyB/fP3haND
OsMTjVXsp+WddLwX07J8vnePCkgoWV2NxtkksRCukRRyx4/Acg2XPyZhsmkEVtPs
/4DewVPF8DBfNrQLobkTBPHAwIJmzhsBD76+5iww0yGL6SOyH43lVMLdWzOqTb4H
H4+4guPWAjNbkUPAFJzfXN7B3wvWjtRZsr82yJItdVPZqsHdns37fDwj4fgF1gKD
LxUVPa8dHqSeEs9c4Ny1iD50WSPqNEksnF8/M7G8NXrBc4EMmhk=
-----END RSA PRIVATE KEY-----

PUBLIC KEY

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCfKGiSGqrZkLnx46ror/WK/jdltbbkPoiaRhb8+8oSj6y+nUKPtpnWU77RZIOeRKZHkuZp6eiz7gVIYLCBrkn0L5nVIOqqgL7d/5hsDaoKSOVFPwCaxCjkKlUbw2W4qtCtsckZB0l2+ZLP0+HXTq3LzQXdl3ZyEAVeE/MT0swpy2BM5Ev6Kh8d6QOCWwtnfGx+z1g3kXWTYm/k+yoxnsMJu1qX4qQ7bRvm551GOorVIfjWYM7pvmurLgmJCRZtLExY8B9FpYH4ejB/OWEFlqNIpsK47JaSz87n5oEHWQt93N8yk4klyIXFb6DbB8gwv4gceriduNy+zQyoodG4Lf0S/7OWLw0MRLJmyuBko6RrIoJLZxEPVwTX7dtOESK6HDOMbU9v0mMGJ0LBPQAN6Z7mdoONknvtIFfYE55K0PRbC4Z9oF0D65ERuPke3ZeNTeo4s2PefFyALwyYlQnqxZCQ+RsjWU6GZ4pfIWqxiGQjOEi4I96o8xyNlcl4T4n5/n8= bryce@Bryces-MacBook-Pro.local

=====Private Key=====
For part 3: In the private key I would expect data on things like what the prime numbers that were multiplied are. I also expect the value for n and d since these are the components that form the private key in the first place. I know there is some additional content that speeds up computations

For part 4: I didn't do anything special, I opened Lapo Luchini's decoder and pasted the contents of my RSA Private Key into it. This gave the data I was looking for.

For part 5: The first number is the version, which just says what version of the ASN.1 we are using. The first interesting number is modulus. This is n from the previous example since the formulation for decrypting something is a^d % n. We also have the publicExponent, which is 65,537 in this example. This represents the public key. The privateExponent is the actual key used to decrypt messages. prime1 and prime2 are the primes used to arrive at the privateExponent. exponent1 and exponent2 are helpers of some kind, the RFC says they equal d mod (p-1) and d mod(q-1), respectively. The final piece of data is coefficient, I'm not entirely sure what this is useful for, but the RFC says it is (inverse of q) mod p. The values are as follows:
modulus:


publicExponent: 65537

privateExponent:
120861182929506579786571973964608385232136370124389283443033238679408643791747501879481184663258993580533432953092085607766225603127152837269323904671901883819200255013894969879892559301365817492336570841545188351127490074177618294605464855928193942079404755973302783285563028020946137734900305215523768112662456188427945332486614214472353131117826207673226900813066295750718602969392114546760165228627950580194803737526917967877416500071081498203888212516762430279644399956361958522212046779473237873578792990743960806550843459387214658030768563991604760328906517899094018494747525503607440988370510807294687417891830604449827927650509354930001788591995586896656014739140920447114131455503434358055183543675056113905036545497162378915986610146721232608181985579074820733757156285897720227743962162533363273720190176944122905912702038812340576623493455453548582193275117079143566644270262864210773456430010756550404587829281

prime1:
1915154983882109591919292801868998508195567128301412698474066472327943938821160272395882242125261281333818381097051732197520964764031560154143305404308357717707140647428402989857147615342248235752137615866405790914364135848383907641524768706470969332404769920585920388214745561294575109013059735126572391308121387106696271039180525437803503726786839233413363865040155065492397201265820807034390680150383501297942485239428562024672060468625504321318455676679477617

prime2:
1885952895132654744420999093979207196202144337096924251073316906564883534303494460455917919209649569081259071932558716280389026992120184545409492429857857262828598510106659217658432148153313619874708275001130321873580485416165276673152249669400104224875324024723813125340288249737607716833417217665252970925218020098349537809425374275233978731707243419175133833526630592995116380200720417043390129689564257324204794517932778820401869560172747563591305242712661743

exponent1:
509786512867897551475228694151466789378086707557839762651328098780245998637947128369412175013735493734355580179716304807753684640867457571891144891865042653545341846504852070709033677916986137185041132624158094244489103100158036968527695654124937974026904058236131973883550304664294410435827503231503660014498338313873330306216400907311627363379410263315320088280292126852234145232193172997161075655331189711805646505055636732233762529184612095234759895626493233

exponent2:
1030702883027393609425621016357985018331205330146337731368432971335801662391446985521912997426370120936012575787851985001063426457982035336724778222381538269721407950264586618228970875236999464776422879987113916391443493692887860515469034688937600638148824032127390858756322447485418856429536055741281499910409903197622494098298497496315904240864829600753708111683832460279019231726340894109329146514047377887011049105830268993245552314520153493219857178055745695

coefficient:
728176008001436243473129256692628782144393133889525364999403896148010539899134230415522189958718468995721807064660063758027203593205500502013119312908230839538099741096574189132948024236691268638690321518992498636858900784501544197888665419602759817166798413201226885396569391863076625429666184592133069410777949180469593323008814010284902028421285236177150472023011181754878183967596918512229037410915154142717897634942632425536911364435315133684087721047136793

=====Public Key=====
For part 6 I am expecting much less information than I saw in the private key. Theoretically, I think anything beyond the bare minimum would be dangerous for this particular conversion because it may allow for a malicious hacker to get closer to the actual key. Thus, I am expecting modulus n and publicExponent, but anything beyond that would surprise me.

For part 7, it is as I expected. I used Chose #1 on "Late-Breaking Advice" to get it into PEM then I pasted it into the same decoder I used for the private key. It glitched a little because it was expecting the first value to be version and the second value to be modulus, but I was able to translate its slip-up. The literal output was as follows
version:
3611892086480197318500942753177628701759471631938942302328349002887553254983928878557026173860467242265125214522022806418684508596508990194309019945500425791089342048721219626547432129016694747375860393635361153200110495664103315172621226750098516362087528268227243277786568247792406305851418742776918007660537798094392272346181138063782310603770622969576047149377987152127152340540378938007761490464473322924864045848746750050516299664914942155854182299913843776367024449894880011520506628992910488036896762358841718986016588102977900413009716608443025529017346750486903412688546325119257994206846462789310341829861538822938597979399385625040560221030900213460640178050968466623380422414815220980649275963108282559161150089600148679072577320001188555753023374997193754738514706873842998430640273113154610281497200525746664770525172175449908128727220698874842412314685821424904895147724893104838127299872320364409284860706431

modulus: 65537

Though these values are mislabeled by the decoder, we can identify them as the same numbers seen above for modulus (here written version) and publicExponent (here written modulus). This confirms what I guessed about how there would only be minimal information needed in this file.

=====Sanity Check=====
The first thing I verified is that the prime1 * prime2 = modulus. This is the case, I checked it with a Python terminal.

I verified the given example of a rule with the following line of code privateExponent*publicExponent % math.lcm(p-1,q-1). This uses variables that I defined in the python environment based on the above values. I repeated this test to make sure the gcd of e and lambda was 1.

I tried writing a for loop to test that every number up to 50 would encrypt and subsequently decrypt to itself, but the loop never made it past 2. It is a good sign that it worked up to 2 though. It is, however, concerning that it will not finish even for the number 3.

I also verified that exponent1 and exponent2 had appropriate values.

I don't really know more cases to test, but these show it should be correct because it fits all the criteria for RSA keys presented in the Lab about doing RSA by hand.
