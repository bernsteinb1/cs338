=====Simple Communication Standards=====
1. Since we are assuming that AITM is impossible, it would be easiest to use Diffie Hellman to arrive at a shared key for something like AES and then encrypt the message using that shared secret key. This is better than something like public-key encryption because it is faster and prevents an Eve from getting any information.

2. To make sure that Bob can detect a change, we can use a cryptographic hash along with the message. Bob can then hash the message himself and make sure it matches, but we still need to ensure that Mal can't modify the message. Because the hash is relatively short, you can encrypt it with Bob's public key (E(P_Bob, H(M))), which makes it so Mal can't change the hash because she does not have Bob's private key. Then, if Mal changes the message, the hash will not match and Bob will be able to tell.

3. Alice and Bob should come to a shared secret through Diffie Hellman. They can then use that secret to encrypt a signed document by encrypting the hash of the document using Bob's secret key. You can then encrypt the document itself and send it along with the signature. Eve can'ty read the document because it's encrypted and the signature will not help her since it can only contain a hash. We then need to assume that Bob has some way of knowing Alice's public key so he can decrypt the document and he can then compute his own hash of the document to verify it matches. This works under the assumption that people have the correct public key.

=====Breaking Security=====
4. Alice could claim that Bob stole her secret key and used it to make a fake signature. This is quite plausible, depending on how Alice claims Bob got the key, if she says Bob got it through physical threats, that is believable. Alice could claim that Bob found the key by discovering the prime factorization. This is implausible as there is no known algorithm that can find prime factors quickly enough to discover the secret key. Alice could claim that Bob cracked the hashing algorithm to invent a new document that hashes to the same value. Again, this is not plausible as we do not know any ways to hack algorithms like SHA-256 to get identical output.

5. Sig_CA will have encryption, hashing, and the secret key. The actual formula that would be used is E(S_CA, H(P_B)). This works because Alice can take the signature, decrypt it with the Trusted Third Platform's public key, and get a hash of Bob's public key. Since Alice should have Bob's public key already, Alice can hash that as well and compare the two values.

6. It is not enough for Alice to get the certificate because certificates are essentially public information. I could query YouTube and get a signature from them. Then I could send that signature to anybody and pretend I was YouTube. The actual problem is that I would not have secret keys, so I could not decrypt a message that was sent and intended for Bob. That is why Alice can make a test of a random number encrypted with Bob's secret key, I would not be able to decrypt it and could not pass the test if Alice added an extra component like the shared secret from Diffie-Hellman.

7. One spot this breaks is if I am able to fool the CA into believing I am "bob.com." Then I could give bob.com a public key that is actually my public key and I could receive all data from bob.com. Another critical flaw would be if I could get the secret key for the certificate authority and then sign a bunch of fake certificates. I could then make anybody's public key look like whatever I wanted it to.
